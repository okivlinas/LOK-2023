#include "stdafx.h"
#include "Error.h"

namespace Error
{
	// серии ошибок:	0 - 99 - системные ошибки
	//					100 - 109 - ошибки параметры
	//					110 - 119 - ошибки открытия и чтения файлов

	ERROR errors[ERROR_MAX_ENTRY] = // таблица ошибок
	{
		ERROR_ENTRY(0, "Недопустим код ошибки"),
		ERROR_ENTRY(1, "Системный сбой"),
		ERROR_ENTRY_NODEF(2), ERROR_ENTRY_NODEF(3), ERROR_ENTRY_NODEF(4), ERROR_ENTRY_NODEF(5),
		ERROR_ENTRY_NODEF(6), ERROR_ENTRY_NODEF(7), ERROR_ENTRY_NODEF(8), ERROR_ENTRY_NODEF(9),
		ERROR_ENTRY_NODEF10(10), ERROR_ENTRY_NODEF10(20), ERROR_ENTRY_NODEF10(30), ERROR_ENTRY_NODEF10(40), ERROR_ENTRY_NODEF10(50),
		ERROR_ENTRY_NODEF10(60), ERROR_ENTRY_NODEF10(70), ERROR_ENTRY_NODEF10(80), ERROR_ENTRY_NODEF10(90),
		ERROR_ENTRY(100, "Параметр -in должен быть задан и задан корректно"),
		ERROR_ENTRY_NODEF(101),ERROR_ENTRY_NODEF(102),ERROR_ENTRY_NODEF(103),
		ERROR_ENTRY(104, "Превышена длина входного параметра"),
		ERROR_ENTRY_NODEF(105),ERROR_ENTRY_NODEF(106),ERROR_ENTRY_NODEF(107),
		ERROR_ENTRY_NODEF(108),ERROR_ENTRY_NODEF(109),
		ERROR_ENTRY(110, "Ошибка при открытии файла с исходным кодом (-in)"),
		ERROR_ENTRY(111, "Недопустимый символ в исходном файле (-in)"),
		ERROR_ENTRY(112, "Ошибка при создании файла протокола (-log)"),
		ERROR_ENTRY(113, "Ошибка при создании таблицы лексем. Превышена емкость таблицы лексем"),
		ERROR_ENTRY(114, "Ошибка при добавлении лексемы в таблицу. Таблица лексем заполнена"),
		ERROR_ENTRY(115, "Ошибка при получении лексемы из таблицы. Недопустимый номер лексемы"),
		ERROR_ENTRY(116, "Ошибка при создании таблицы идентификаторов. Превышена емкость таблицы идентификаторов"),
		ERROR_ENTRY(117, "Ошибка при добавлении идентификатора в таблицу. Таблица идентификаторов заполнена"),
		ERROR_ENTRY(118, "Ошибка при получении записи из таблицы идентификаторов. Недопустимый номер идентификатора"),
		ERROR_ENTRY(119, "Ошибка. В стандартной библиотеке LOK-2023 такой функции нет"),
		ERROR_ENTRY(120, "Ошибка. Знак '-' может быть использован, только перед литералом!"),
		ERROR_ENTRY(121, "Ошибка в синтаксисе!"),
		ERROR_ENTRY_NODEF(122),
		ERROR_ENTRY_NODEF(123),
		ERROR_ENTRY_NODEF(124),
		ERROR_ENTRY_NODEF(125),
		ERROR_ENTRY_NODEF(126),
		ERROR_ENTRY_NODEF(127),
		ERROR_ENTRY_NODEF(128),
		ERROR_ENTRY_NODEF(129),
		ERROR_ENTRY_NODEF10(130),ERROR_ENTRY_NODEF10(140),ERROR_ENTRY_NODEF10(150),
		ERROR_ENTRY_NODEF10(160),ERROR_ENTRY_NODEF10(170),ERROR_ENTRY_NODEF10(180),ERROR_ENTRY_NODEF10(190),
		ERROR_ENTRY_NODEF100(200),ERROR_ENTRY_NODEF100(300),ERROR_ENTRY_NODEF100(400),ERROR_ENTRY_NODEF100(500),
		ERROR_ENTRY(600, "Нет закрывающей кавычки"),
		ERROR_ENTRY(601, "Найдено неопознанное слово"),
		ERROR_ENTRY(602, "Использованна неинициализированная переменная"),
		ERROR_ENTRY(603, "Некорректное объявление функции"),
		ERROR_ENTRY(604, "При инициализации функции не хватает закрывающей скобки ')'"),
		ERROR_ENTRY(605, "При инициализации функции невозможно узнать тип данных возвращаемого значения"),
		ERROR_ENTRY(606, "Ошибка. Повторное объявление переменной!"),
		ERROR_ENTRY(607, "Ошибка при присвоении значения. Левый аргумент операции присваивания должен быть идентификатором!"),
		ERROR_ENTRY(608, "Невозможно определить тип переменной, инициализированной неявно! После оператора => должны быть либо идентификатор, либо литерал"),
		ERROR_ENTRY(609, "Использована необъявленная переменная"),
		ERROR_ENTRY(610, "Ошибка при вызове функции! Количество параметров не совпадает"),
		ERROR_ENTRY(611, "При использовании лямбда-выражения el => {} не найдено ключевое слово For"),
		ERROR_ENTRY(612, "Ошибка. В лямбда выражении в цикле For передаваемый параметр должен быть идентификатор"),
		ERROR_ENTRY(613, "Ошибка. Неправильно употребленна лямбда функции. Она предназначена для цикла For(start, end, step, el => {})"),
		ERROR_ENTRY(614, "Ошибка. Параметр перед входящим в цикл For лямбда выражением должен быть идентификатором или литералом"),
		ERROR_ENTRY(615, "Ошибка. Неправильная структура цикла For"),
		ERROR_ENTRY(616, "Ошибка. Оператор break может быть использован только в теле цикла!"),
		ERROR_ENTRY(617, "Ошибка. После имени функции ожидалась открывающая скобка '('"),
		ERROR_ENTRY(618, "Ошибка. Как ссылки можно инициализировать только параметры"),
		ERROR_ENTRY(619, "Ошибка. Нельзя использовать литералы/функции в качестве передаваемого параметра, берущегося по ссылке"),
		ERROR_ENTRY(620, "Синтаксическая ошибка. После имени функции ожидалась открывающая скобка '('"),
		ERROR_ENTRY(621, "Использован неверные управляющий символ(доступны только \\n, \\t)"),
		ERROR_ENTRY(622, "Ошибка. Не найдена пара для косой скобки '`'"),
		ERROR_ENTRY(623, "Ошибка. Строковый литерал может использоваться только в качестве аргумента потока вывода"),
		ERROR_ENTRY(624, "Ошибка. Превышено значение литерала типа num"),
		ERROR_ENTRY(625, "Ошибка. Слишком маленькое значение литерала типа num"),
		ERROR_ENTRY(626, "Ошибка в значение литерала типа float"),
		ERROR_ENTRY(627, "Ошибка. Превышен размер строкового литерала"),
		ERROR_ENTRY(628, "Ошибка. Функцию типа action нельзя использовать в выражениях или передавать в качестве параметра"),
		ERROR_ENTRY(629, "Ошибка. Точка входа в программу main может быть описана лишь один раз"),
		ERROR_ENTRY(630, "Ошибка. Функция типа action не может ничего возвращать"),
		ERROR_ENTRY(631, "Ошибка. Функции, тип данных которых не action, должны возвращать значение"),
		ERROR_ENTRY(632, "Ошибка. Слева от оператора => должен быть незадействованный в данной области видимости идентификатор"),
		ERROR_ENTRY(633, "Ошибка. В теле цикла For нельзя объявлять шаблонную функцию"),
		ERROR_ENTRY(634, "Ошибка. В теле цикла For нельзя возвращать значение"),
		ERROR_ENTRY_NODEF(635),
		ERROR_ENTRY_NODEF(636),
		ERROR_ENTRY_NODEF(637),
		ERROR_ENTRY_NODEF(638),
		ERROR_ENTRY_NODEF(639),
		ERROR_ENTRY_NODEF10(640),
		ERROR_ENTRY(650, "Ошибка в глобальной области!"),
		ERROR_ENTRY(651, "Ошибка в выражении"),
		ERROR_ENTRY(652, "Ошибка при построении контрукции параметров"),
		ERROR_ENTRY(653, "Ошибки при указании типов данных для параметров"),
		ERROR_ENTRY(654, "Ошибка при вызове функции"),
		ERROR_ENTRY(655, "Ошибка в параметрах вызываемой функции"),
		ERROR_ENTRY(656, "Ошибка в теле функции"),
		ERROR_ENTRY(657, "Ошибка в инициализации переменных"),
		ERROR_ENTRY(658, "Ошибка в использовании условного оператора"),
		ERROR_ENTRY(659, "Ошибка при возвращении значения функции"),
		ERROR_ENTRY(660, "Ошибка в при использовании все возможных типов значений"),
		ERROR_ENTRY(661, "Ошибка в теле условного оператора"),
		ERROR_ENTRY(662, "Ошибка при вызове оператора console(). Неверный синтаксис. console(Значение);"),
		ERROR_ENTRY(663, "Ошибка в искусственной области видимости!"),
		ERROR_ENTRY(664, "Ошибка в параметрах цикла"),
		ERROR_ENTRY(665, "Ошибка в теле цикла"),
		ERROR_ENTRY(666, "Ошибка при иницилизации функции"),
		ERROR_ENTRY(667, "Ошибка в определении типа переменной/функции"),
		ERROR_ENTRY(668, "Ошибка в теле функции типа Action"),
		ERROR_ENTRY(669, "Ошибка при инициализации функции Action"),
		ERROR_ENTRY(670, "Ошибка. Не хватает точки с запятой"),
		ERROR_ENTRY(671, "Ошибка. Ожидалась закрывающая кругла скобка ')'"),
		ERROR_ENTRY_NODEF(672),
		ERROR_ENTRY_NODEF(673),
		ERROR_ENTRY_NODEF(674),
		ERROR_ENTRY_NODEF(675),
		ERROR_ENTRY_NODEF(676),
		ERROR_ENTRY_NODEF(677),
		ERROR_ENTRY_NODEF(678),
		ERROR_ENTRY_NODEF(679),
		ERROR_ENTRY_NODEF10(680),ERROR_ENTRY_NODEF10(690),
		ERROR_ENTRY_NODEF100(700),ERROR_ENTRY_NODEF100(800),ERROR_ENTRY_NODEF100(900)
	};

	ERROR geterror(int id) // получение ошибки по ее коду
	{
		if (!(id > 0 && id < ERROR_MAX_ENTRY))
		{
			ERROR e = errors[0]; // недопустимый код ошибки
			e.inext.col = e.inext.line = -1; // недопустимые координаты ошибки
			return e;
		}
		else
		{
			ERROR e = errors[id]; // ошибка по коду
			e.inext.col = e.inext.line = -1; // недопустимые координаты ошибки
			return e;
		}
	}

	ERROR geterrorin(int id, int line = -1, int col = -1) // возвращение ошибки по коду, плюс вывод строку и место
	{
		if (!(id > 0 && id < ERROR_MAX_ENTRY))
		{
			ERROR e = errors[0];
			return e;
		}
		else
		{
			ERROR e = errors[id];
			e.inext = { short(line), short(col) };
			return e;
		}
	}
}